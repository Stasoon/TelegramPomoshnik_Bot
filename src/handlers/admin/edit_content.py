from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.callback_data import CallbackData

from config import Config
from src.misc.admin_states import ContentEditingStates
from src.utils import Json, read_txt_file
from src.utils.txt_data import rewrite_txt_file

editing_callback_data = CallbackData("edit_content", "option", "category")


class Messages:
    @staticmethod
    async def get_current_content(option: str, category: str = None) -> str:
        match option:
            case 'spec':
                return await Json(Config.JsonFilePath.SPECIALISTS).get_data(key=category)
            case 'bots':
                return await Json(Config.JsonFilePath.USEFUL_BOTS).get_data(key=category)
            case 'chats':
                return await Json(Config.JsonFilePath.USEFUL_CHATS).get_data(key=category)
            case 'blogs':
                return await read_txt_file(Config.TxtFilePath.BLOGS)


class Keyboards:
    reply_button_for_admin_menu = KeyboardButton('üìù –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç üìù')

    @staticmethod
    def get_back_button():
        return InlineKeyboardMarkup().add(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='back_to_edit_options'))

    @staticmethod
    def get_options_to_edit() -> InlineKeyboardMarkup:
        markup = InlineKeyboardMarkup(row_width=2)

        markup.add(InlineKeyboardButton("* –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø–æ TG *", callback_data="*")).row().add(
            InlineKeyboardButton("üë• –ú–∞–Ω–∞–≥–∏",
                                 callback_data=editing_callback_data.new(option='spec', category='managers')),
            InlineKeyboardButton("üë• –ó–∞–∫—É–ø—â–∏–∫–∏",
                                 callback_data=editing_callback_data.new(option='spec', category='buyers')),
            InlineKeyboardButton("üë• –î–∏–∑–∞–π–Ω–µ—Ä—ã",
                                 callback_data=editing_callback_data.new(option='spec', category='designers')),
            InlineKeyboardButton("üë• –ö–æ–¥–µ—Ä—ã", callback_data=editing_callback_data.new(option='spec', category='coders')),
            InlineKeyboardButton("üë• –ì–∞—Ä–∞–Ω—Ç—ã",
                                 callback_data=editing_callback_data.new(option='spec', category='guarantors')),
            InlineKeyboardButton("üë• –ö–æ–Ω—Ç–µ–Ω—Ç—â–∏–∫–∏",
                                 callback_data=editing_callback_data.new(option='spec', category='content_makers')),
            InlineKeyboardButton("üë• –ö—Ä–µ–∞—Ç–∏–≤—â–∏–∫–∏",
                                 callback_data=editing_callback_data.new(option='spec', category='creative')),
        )

        markup.add(InlineKeyboardButton("* –ü–æ–ª–µ–∑–Ω—ã–µ –±–æ—Ç—ã *", callback_data="*")).row().add(
            InlineKeyboardButton("üí≠ –î–ª—è —á–∞—Ç–æ–≤",
                                 callback_data=editing_callback_data.new(option='bots', category='chatbots')),
            InlineKeyboardButton("üì¢ –î–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞",
                                 callback_data=editing_callback_data.new(option='bots', category='posting')),
            InlineKeyboardButton("üóë –î–ª—è —á–∏—Å—Ç–∫–∏",
                                 callback_data=editing_callback_data.new(option='bots', category='cleaning')),
            InlineKeyboardButton("üí∏ –î–ª—è –∑–∞–∫—É–ø–∞",
                                 callback_data=editing_callback_data.new(option='bots', category='purchases')),
            InlineKeyboardButton("üßë‚Äçüíª –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏",
                                 callback_data=editing_callback_data.new(option='bots', category='feedbacks')),
        )

        markup.add(InlineKeyboardButton("* –ß–∞—Ç—ã *", callback_data="*")).row().add(
            InlineKeyboardButton("üö® –ê–¥–º–∏–Ω—Å–∫–∏–µ —á–∞—Ç—ã",
                                 callback_data=editing_callback_data.new(option='chats', category='admin')),
        )

        markup.add(InlineKeyboardButton("* –ü–æ–ª–µ–∑–Ω—ã–µ –±–ª–æ–≥–∏ *", callback_data="*")).row().add(
            InlineKeyboardButton("üìå –ü–æ–ª–µ–∑–Ω—ã–µ –±–ª–æ–≥–∏",
                                 callback_data=editing_callback_data.new(option='blogs', category=''))
        )

        return markup


class Handlers:
    @staticmethod
    async def __handle_edit_content_button(message: Message):
        await message.answer('‚úè –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π —Ä–∞–∑–¥–µ–ª —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:', reply_markup=Keyboards.get_options_to_edit())

    @staticmethod
    async def __handle_back_to_edit_options(callback: CallbackQuery, state: FSMContext):
        await state.finish()
        await callback.message.edit_text(
            '‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. \n\n‚úè –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π —Ä–∞–∑–¥–µ–ª —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:',
            reply_markup=Keyboards.get_options_to_edit()
        )

    @staticmethod
    async def __handle_edit_specialists(callback: CallbackQuery, callback_data: dict, state: FSMContext):
        await callback.message.edit_text(f'–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:')

        category = callback_data.get('category')
        option = callback_data.get('option')
        current_data = await Messages.get_current_content(option=option, category=category)
        await callback.message.answer(current_data)

        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:', reply_markup=Keyboards.get_back_button())

        await state.update_data(category=category, option=option)
        await state.set_state(ContentEditingStates.Specialists.enter_content.state)

    @staticmethod
    async def __handle_new_content_message(message: Message, state: FSMContext):
        data = await state.get_data()
        category = data.get('category')
        option = data.get('option')
        message_text = message.html_text

        match option:
            case 'spec':
                await Json(Config.JsonFilePath.SPECIALISTS).update_data(key=category, value=message_text)
            case 'bots':
                await Json(Config.JsonFilePath.USEFUL_BOTS).update_data(key=category, value=message_text)
            case 'chats':
                await Json(Config.JsonFilePath.USEFUL_CHATS).update_data(key=category, value=message_text)
            case 'blogs':
                await rewrite_txt_file(Config.TxtFilePath.BLOGS, new_text=message_text)

        await message.answer('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
        await state.finish()

    @classmethod
    def register_export_users_handlers(cls, dp: Dispatcher):
        dp.register_message_handler(cls.__handle_edit_content_button, is_admin=True,
                                    text=Keyboards.reply_button_for_admin_menu.text)

        dp.register_callback_query_handler(cls.__handle_back_to_edit_options,
                                           text='back_to_edit_options', state='*')

        dp.register_callback_query_handler(cls.__handle_edit_specialists,
                                           editing_callback_data.filter(), state=None)

        dp.register_message_handler(cls.__handle_new_content_message,
                                    state=ContentEditingStates.Specialists.enter_content)
